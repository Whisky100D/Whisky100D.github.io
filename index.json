[{"categories":["学习分享"],"content":"Python多线程卖票包含信号量限制、进度条、彩色字体","date":"2022-12-03","objectID":"/python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8D%96%E7%A5%A8/","tags":["Python"],"title":"Python多线程卖票","uri":"/python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8D%96%E7%A5%A8/"},{"categories":["学习分享"],"content":" #!/usr/bin/python3 import threading import time import queue from colorama import Fore from rich.progress import Progress tt = 50 threads = [] q = queue.Queue() # 控制最大可用窗口数 sem=threading.Semaphore(5) def sale(sem,progress,task): while not q.empty(): if threading.current_thread().name == \"第1窗口\": print(Fore.GREEN + \"{}：卖出第{}张票\".format(threading.current_thread().name,q.get())) elif threading.current_thread().name == \"第2窗口\": print(Fore.MAGENTA + \"{}：卖出第{}张票\".format(threading.current_thread().name,q.get())) elif threading.current_thread().name == \"第3窗口\": print(Fore.BLUE + \"{}：卖出第{}张票\".format(threading.current_thread().name,q.get())) elif threading.current_thread().name == \"第4窗口\": print(Fore.CYAN + \"{}：卖出第{}张票\".format(threading.current_thread().name,q.get())) else: print(Fore.YELLOW + \"{}：卖出第{}张票\".format(threading.current_thread().name,q.get())) if not progress.finished: progress.update(task, advance=1) time.sleep(5) sem.release() def main(): for i in range(tt): q.put(i+1) with Progress() as progress: task = progress.add_task(\"[cyan]Processing\", total=tt) # 控制窗口数 for j in range(20): sem.acquire() td = threading.Thread(target=sale,args=(sem,progress,task),name=\"第\"+str(j+1)+\"窗口\") # 添加线程到线程列表 threads.append(td) td.start() # 等待所有线程完成后退出主线程 for t in threads: t.join() print(Fore.RED +\"票已卖完！！！\") if __name__==\"__main__\": main() ","date":"2022-12-03","objectID":"/python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8D%96%E7%A5%A8/:0:0","tags":["Python"],"title":"Python多线程卖票","uri":"/python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8D%96%E7%A5%A8/"},{"categories":["学习分享"],"content":"通过Hugo和Actions快速搭建github博客","date":"2022-11-15","objectID":"/%E9%80%9A%E8%BF%87hugo%E5%92%8Cactions%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/","tags":null,"title":"通过Hugo和Actions快速搭建github博客","uri":"/%E9%80%9A%E8%BF%87hugo%E5%92%8Cactions%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/"},{"categories":["学习分享"],"content":"前言 简单叙述一下流程，先在本地仓库搭建好Hugo博客环境，再在github上创建两个仓库，其中一个可为任意名称的私有库暂且称其为Blog_Private，另一个必须是：github用户名.github.io为命名的公开库，假设你的用户名为xiaoming，该仓库名应为：xiaoming.github.io，且必须为公开库 本地仓库 Blog_Private库 xiaoming.github.io库 以上三个仓库准备好之后，再进行三步配置便可完成 第一步，将本地仓库提交到Blog_Private库中 第二步，配置Actions文件 第三步，生成并设置密钥 ","date":"2022-11-15","objectID":"/%E9%80%9A%E8%BF%87hugo%E5%92%8Cactions%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/:1:0","tags":null,"title":"通过Hugo和Actions快速搭建github博客","uri":"/%E9%80%9A%E8%BF%87hugo%E5%92%8Cactions%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/"},{"categories":["学习分享"],"content":"思路 本地同步Blog_Private库，Blog_Private库通过Actions自动部署静态页面到公开库xiaoming.github.io中，通过域名xiaoming.github.io访问到公开库xiaoming.github.io的pages中查看博客 ","date":"2022-11-15","objectID":"/%E9%80%9A%E8%BF%87hugo%E5%92%8Cactions%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/:1:1","tags":null,"title":"通过Hugo和Actions快速搭建github博客","uri":"/%E9%80%9A%E8%BF%87hugo%E5%92%8Cactions%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/"},{"categories":["学习分享"],"content":"好处 该方法是把源码部署到私有库中，将自动生成的静态页面放在公开库xiaoming.github.io中，相较于直接将源码部署到xiaoming.github.io中更加安全方便 ","date":"2022-11-15","objectID":"/%E9%80%9A%E8%BF%87hugo%E5%92%8Cactions%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/:1:2","tags":null,"title":"通过Hugo和Actions快速搭建github博客","uri":"/%E9%80%9A%E8%BF%87hugo%E5%92%8Cactions%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/"},{"categories":["学习分享"],"content":"部署本地环境 注意 只适用于Hugo系统 推荐下载extended版本，该版本可自定义样式 Hugo下载地址：https://github.com/gohugoio/hugo/releases 解压到合适位置，配置hugo.exe的环境变量，方便使用命令行 这里参考LoveIt主题的文档：https://hugoloveit.com/zh-cn/theme-documentation-basics/ # 创建一个网站并进入 hugo new site my_website cd my_website # 通过git下载主题 # git安装参考：https://blog.csdn.net/mukes/article/details/115693833，几乎可以一路默认 git init git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt # 修改config.toml配置文件，可进入https://hugoloveit.com/zh-cn/theme-documentation-basics/，作为配置参考 # 中文需要在第二行添加一条配置 defaultContentLanguage = \"zh-cn\" # 生成第一篇文章，在first_post.md随意输入，draft: true 改为 draft: false hugo new posts/first_post.md # 本地启动测试 hugo serve # 访问 http://127.0.0.1:1313 能成功访问到并能正常打开文章，本地环境便部署成功 还有很多主题可供选择：https://themes.gohugo.io/，使用时可参考Demo文档 文章开头可参考 --- title: \"test\" date: 1900-01-01 categories: [\"test\"] tags: [\"test\"] description: \"test\" draft: false --- \u003c!--more--\u003e ","date":"2022-11-15","objectID":"/%E9%80%9A%E8%BF%87hugo%E5%92%8Cactions%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/:2:0","tags":null,"title":"通过Hugo和Actions快速搭建github博客","uri":"/%E9%80%9A%E8%BF%87hugo%E5%92%8Cactions%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/"},{"categories":["学习分享"],"content":"Git同步本地和远程仓库 通过HTTPS协议连接GitHub仓库，参考：https://www.cnblogs.com/liyan-blogs/p/15153764.html 过程中会遇到空目录不上传的问题，可在空目录中创建.gitkeep文件作为占位符 注意这里同步的是Blog_Private仓库 # 配置git git config --global user.name “your name” git config --global user.email “your email” # 在需要同步的本地仓库，执行初始化 git init # git关联远程仓库地址的三种方式 ## 1.先删后加，add是需要先删处再添加，origin默认推荐仓库名 git remote remove origin git remote add origin https://github.com/test/test.git ## 2.修改，set-url是在已有连接时修改关联远程数据库 git remote set-url \u003cremote_name\u003e \u003cremote_url\u003e git remote set-url origin https://github.com/test/test.git ## 3.直接修改config文件 git config -e # 获取token，在连接过程中会需要认证，选择token认证 右上角头像 --\u003e Settings --\u003e Developer Settings --\u003e Personal access tokens(classic) # 将远程仓库的文件pull到本地 git pull --rebase origin master # 提交代码小脚本:upload.bat @echo off cd 本地仓库根目录 git status # 查看代码状态 git add . # 将代码添加到暂存区，(.代表该目录下所有文件、还可用*.md等等) git commit -m \"first commit\" # 将代码提交到本地仓库(后跟该次提交的名称) git push origin master # 将代码push到远程仓库 pause ","date":"2022-11-15","objectID":"/%E9%80%9A%E8%BF%87hugo%E5%92%8Cactions%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/:3:0","tags":null,"title":"通过Hugo和Actions快速搭建github博客","uri":"/%E9%80%9A%E8%BF%87hugo%E5%92%8Cactions%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/"},{"categories":["学习分享"],"content":"配置Actions文件 注意 在Blog_Private仓库的Actions中自定义一个workflows 配置如下，只适用于Hugo系统 name: GitHub Pages on: push: branches: - master jobs: deploy: runs-on: ubuntu-20.04 steps: - name: Checkout repositories uses: actions/checkout@v2 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: 'latest' - name: Build run: hugo - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }} external_repository: xiaoming/xiaoming.github.io # 只需修改此处，改为自己的用户名 publish_branch: master publish_dir: ./public 配置完成后，再次点击Actions，点击中间main.yml，点击deploy，若发现只有Deploy步骤报错，便配置成功 此处有两个问题 secrets.ACTIONS_DEPLOY_KEY私钥和xiaoming.github.io的公钥未配置导致Deploy步骤报错 若未出现则无需理会。Actions会自动部署到xiaoming.github.io库的master分支，而现在xiaoming.github.io库可能默认为main分支，需要重命名main为master ","date":"2022-11-15","objectID":"/%E9%80%9A%E8%BF%87hugo%E5%92%8Cactions%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/:4:0","tags":null,"title":"通过Hugo和Actions快速搭建github博客","uri":"/%E9%80%9A%E8%BF%87hugo%E5%92%8Cactions%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/"},{"categories":["学习分享"],"content":"生成并设置密钥 此处可参考：https://github.com/peaceiris/actions-gh-pages，Create SSH Deploy Key 处，有详细的位置图标 执行以下命令会生成两个文件 gh-pages.pub 是公钥 gh-pages 是私钥 ssh-keygen -t rsa -b 4096 -C \"$(git config user.email)\" -f gh-pages -N \"\" 公钥gh-pages.pub放在xiaoming.github.io中Settings的Deploy keys中，名字随意 私钥gh-pages放在Blog_Private中Settings的Secrets的Actions的New repository secrets，名字必须为ACTIONS_DEPLOY_KEY 配置完成后，再次点击Actions，点击中间main.yml，点击右边Re-run all jobs，无报错，便完成 ","date":"2022-11-15","objectID":"/%E9%80%9A%E8%BF%87hugo%E5%92%8Cactions%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/:5:0","tags":null,"title":"通过Hugo和Actions快速搭建github博客","uri":"/%E9%80%9A%E8%BF%87hugo%E5%92%8Cactions%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/"},{"categories":["学习分享"],"content":"自定义样式 参考：https://lucas-0.github.io/ 创建文件：\\assets\\css\\_custom.scss // ============================== // Custom style // 自定义样式 // ============================== @import url('https://fonts.googleapis.com/css2?family=Rock+Salt\u0026family=Noto+Serif+SC\u0026family=Roboto+Slab:wght@100..900\u0026display=swap'); .page { position: relative; max-width: 800px; //宽度限制800 margin: 0 auto; } 创建文件：\\assets\\css\\_override.scss // ============================== // Override Variables // 覆盖变量 // ============================== // @import url('https://fonts.proxy.ustclug.org/css2?family=Rock+Salt\u0026family=Noto+Serif+SC:wght@400;600;700\u0026family=Roboto+Slab:wght@400;600;700\u0026display=swap'); //使用中科大加速 // @import url('https://fonts.googleapis.com/css2?family=Rock+Salt\u0026family=Noto+Serif+SC:wght@200..900\u0026family=Roboto+Slab:wght@100..900\u0026display=swap'); // Font and Line Height $global-font-family: \"Roboto Slab\", \"Noto Serif SC\", \"PingFang SC\", \"Hiragino Sans GB\", \"Microsoft Yahei\", \"WenQuanYi Micro Hei\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", Helvetica, Arial, -apple-system, system-ui, sans-serif; $global-font-size: 18px; $global-font-weight: 400; //粗细 $global-line-height: 1.75rem; //文本行的基线间的距离 原始1.5rem会让屏幕宽不够时h1重合 h1{font-size:1.5em;} //原始为2em，会与行高1.5rem冲突，修改为1.5em $header-title-font-family: \"Rock Salt\", -apple-system, system-ui, sans-serif; // Color of the secondary text $global-font-secondary-color: #7d7d84; ","date":"2022-11-15","objectID":"/%E9%80%9A%E8%BF%87hugo%E5%92%8Cactions%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/:6:0","tags":null,"title":"通过Hugo和Actions快速搭建github博客","uri":"/%E9%80%9A%E8%BF%87hugo%E5%92%8Cactions%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/"}]